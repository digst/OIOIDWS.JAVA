package bootstrap;

import client.Application;
import client.sts.ScenarioSingleton;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.SpringApplication;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import sts.TestStsClient;

import static org.junit.Assert.assertTrue;

@RunWith(SpringRunner.class)
@ContextConfiguration(locations = {"file:../../examples/oio-idws-rest/rest-client/src/main/resources/cxf.xml"})
public class RestBootstrapScenarioJavaTest {

    @Ignore("Ignored for now - deployments needed to automate getting bootstrap token")
    @Test
    public void testBootstrapScenario_toJavaWSP() {
        //TODO automate getting bootstrap token (see bootstrap tests)
        //Paste bootstrap token here:
        String bootstrapBase64 = "";
        Application.setRequestUrl("https://localhost:8443/api/hello?name=John");
        Application.setTokenUrl("https://localhost:8443/auth");
        Application.setAudience("https://wsp.itcrew.dk");
        ScenarioSingleton.instance.setScenario("https://bootstrap.sts.nemlog-in.dk/");

        TestStsClient.setBootStrapToken(bootstrapBase64);

        SpringApplication.run(Application.class);
        String restResponse = Application.getRestResponse();

        assertTrue(restResponse.contains("200"));
        assertTrue(restResponse.contains("Hello John"));
    }

}
